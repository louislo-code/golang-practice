// package main

// const (
// 	first = iota + 10
// 	second
// 	third
// )

// const (
// 	forth = iota
// 	fifth
// )

// func main() {

// 	// var i int
// 	// i = 5
// 	// fmt.Println(i)
// 	// var f float32 = 3.14
// 	// fmt.Println(f)
// 	// name := "Hello"
// 	// fmt.Println(name)
// 	// isTrue := true
// 	// fmt.Println(isTrue)

// 	// var name *string = new(string)
// 	// *name = "Hello"
// 	// fmt.Println(name)
// 	// i := 5
// 	// ptr := &i
// 	// fmt.Println(ptr, i)
// 	fmt.Println(first, second, third, forth, fifth)
// 	// i := 5
// 	// ptr := &i
// 	// fmt.Println(ptr, i)
// }

// func main() {
// 	arr := [3]int{1, 2, 3}

// 	fmt.Println(arr)
// 	fmt.Println(arr[1])

// 	slice := []int{1, 2, 3}
// 	slice = append(slice, 4, 5)

// 	fmt.Println(slice)
// 	fmt.Println(slice[1:])
// 	fmt.Println(slice[:3])
// 	fmt.Println(slice[1:3])
// }

// func main() {
// 	m := map[string]int{"key": 5}

// 	fmt.Println(m)
// 	m["key"] = 10
// 	fmt.Println(m)
// 	delete(m, "key")
// 	m["new"] = 2
// 	fmt.Println(m)

// }

//struct
// type User struct {
// 	ID        int
// 	FirstName string
// 	LastName  string
// 	Address   Address
// }

// type Address struct {
// 	Country string
// 	City    string
// }

// func main() {
// 	address := Address{
// 		Country: "Germany",
// 		City:    "Berlin",
// 	}
// 	user := User{
// 		ID:        1,
// 		FirstName: "First",
// 		LastName:  "Last",
// 		Address:   address,
// 	}
// 	fmt.Println(user)
// }

package main

import (
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

func main() {
	dsn := "host=localhost user=postgres password=postgres dbname=internalsystem port=5432 sslmode=disable TimeZone=Asia/Shanghai"
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})

	if err != nil {
		panic("Could not connect with the database")
	}

	// fmt.Println(db)

	// db.AutoMigrate(&User{})

	db.Migrator().DropTable(&User{}, &Task{})
	db.Migrator().CreateTable(&User{}, &Task{})

	// user := User{
	// 	Email: sql.NullString{
	// 		String: "a@a.com",
	// 		Valid:  true,
	// 	},
	// }
	user := User{
		StaffName:  "Louis Lo",
		Email:      "louisl@winz.com.hk",
		ClientName: "HKAA",
		ClientAddress: Address{
			Name: "303 Cheung Sha Wan Road",
		},
		Tasks: []Task{
			{
				Title: "Task1",
			},
			{
				Title: "Task2",
			},
		},
	}

	db.Create(&user)

	// u := User{}

	// db.First(&u)

	// db.Preload("Address").First(&u)

	// fmt.Println(u)

	// address := Address{
	// 	UserId: user.ID,
	// 	Name:   "Main str.",
	// }

	// db.Create(&address)
	// user := User{
	// 	Model: gorm.Model{
	// 		CreatedAt: time.Now(),
	// 	},
	// }

	// db.First(&user)

	// fmt.Println(user)
	// users := []User{
	// 	{
	// 		FirstName: "John",
	// 		LastName:  "Doe",
	// 		Email:     "john@doe.com",
	// 	},
	// 	{
	// 		FirstName: "Jane",
	// 		LastName:  "Smith",
	// 		Email:     "jane@smith.com",
	// 	},
	// 	{
	// 		FirstName: "William",
	// 		LastName:  "Blake",
	// 		Email:     "william@keo.com.hk",
	// 	},
	// }
	// for _, user := range users {
	// 	db.Create(&user)
	// }
	// user := User{
	// 	FirstName: "John",
	// 	LastName:  "Doe",
	// 	Email:     "john@doe.com",
	// }

	// db.Create(&user)

	// user := User{
	// 	Id:        1,
	// 	FirstName: "John 2",
	// 	LastName:  "Doe 2",
	// 	Email:     "john@doe.com",
	// }
	// db.Updates(&user)

	// user := User{
	// 	Id: 1,
	// }

	// db.Delete(&user)
	// db,err :=gorm.Open(postgres.Open(dsn:"postgres:postgres"),&gorm.Config{})
}

type User struct {
	// gorm.Model
	ID            uint
	StaffName     string  `gorm:"type:VARCHAR(30);null"`
	ClientName    string  `gorm:"type:VARCHAR(30);not null"`
	ClientAddress Address `gorm:"foreignKey:UserId"`
	Email         string  `gorm:"unique; not null"`
	Tasks         []Task  `gorm:"many2many:user_tasks"`
	// AssignedTask string gorm:"type:VARCHAR(30)"
}

type Task struct {
	// gorm.Model
	ID   uint
	Tile string
}

// func main() {
// 	// Print("Hello, World")
// 	result, err := Div(4, 0)
// 	if err != nil {
// 		fmt.Println("Invalid")
// 	}
// 	fmt.Println(result)
// 	// fmt.Println(Div(4, 2))
// }

// // func Print(message string) {
// // 	fmt.Println(message)
// // }

// func Sum(a int, b int) int {
// 	return a + b
// }

// func Div(a int, b int) (int, error) {
// 	if b == 0 {
// 		return 0, errors.New("Cannot divided by 0")
// 	}
// 	return a / b, nil
// }
